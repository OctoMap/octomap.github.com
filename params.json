{"google":"","name":"OctoMap","tagline":"An Efficient Probabilistic 3D Mapping Framework Based on Octrees","body":"The OctoMap library\r\nimplements a 3D occupancy grid mapping\r\napproach, providing data structures and mapping algorithms in C++. The map\r\nimplementation is based on an octree and is designed to meet the following\r\nrequirements:\r\n* **Full 3D model.**  The map is able to model arbitrary environments\r\nwithout prior assumptions about it. The representation models occupied\r\nareas as well as free space. If no information is available about an\r\narea (commonly denoted as <i>unknown areas</i>), this information is\r\nencoded as well.  While the distinction between free and occupied\r\nspace is essential for safe robot navigation, information about\r\nunknown areas is important, e.g., for autonomous exploration of an\r\nenvironment.\r\n* **Updatable.**  It is possible to add new information or sensor\r\n readings at any time. Modeling and updating is done in\r\n a <i>probabilistic</i> fashion. This accounts for sensor noise or\r\n measurements which result from dynamic changes in the environment,\r\n e.g., because of dynamic objects.  Furthermore, multiple robots are\r\n able to contribute to the same map and a previously recorded map is\r\n extendable when new areas are explored.\r\n* **Flexible.** The extent of the map does not have to be known in\r\nadvance. Instead, the map is dynamically expanded as needed. The map\r\nis multi-resolution so that, for instance, a high-level planner is\r\nable to use a coarse map, while a local planner may operate using a\r\nfine resolution. This also allows for efficient visualizations which\r\nscale from coarse overviews to detailed close-up views.\r\n* **Compact.** The map is stored efficiently, both in memory and on\r\ndisk. It is possible to generate compressed files for later usage or\r\nconvenient exchange between robots even under bandwidth constraints.\r\n\r\nDetailed information about the implemented approach can be found in the[OctoMap paper (PDF)](http://ais.informatik.uni-freiburg.de/publications/papers/wurm10octomap.pdf). \r\n\r\nThe OctoMap library is available as a self-contained source distribution for Linux (recommended), Mac OS and Windows. It was developed by [Kai M. Wurm](http://www.informatik.uni-freiburg.de/~wurm/) and [Armin Hornung](http://www.informatik.uni-freiburg.de/~hornunga/), and is currently maintained by Armin Hornung (@ahornung). Feel free to contact us with questions and issues. To report bugs or request features, best use our tracker at https://github.com/OctoMap/octomap/issues. We would like to thank Stefan Oßwald, Jörg Müller, Radu Rusu, Raphael Schmitt, and Christoph Sprunk for their contrbutions. \r\n\r\n## License\r\n\r\n### Using Octomap?\r\nPlease let us know if you are using OctoMap, as we are curious to find out how it enables other people's work or research. \r\nAdditionally, please cite our paper if you use OctoMap in your research:\r\n```\r\n@inproceedings{octomap,\r\n  author = {K. M. Wurm and A. Hornung and \r\n  M. Bennewitz and C. Stachniss and W. Burgard},\r\n  title = {{OctoMap}: A Probabilistic, Flexible, and Compact {3D} Map \r\n  Representation for Robotic Systems},\r\n  booktitle = {Proc. of the ICRA 2010 Workshop on Best Practice in \r\n  3D Perception and Modeling for Mobile Manipulation},\r\n  year = 2010,\r\n  month = may,\r\n  address = {Anchorage, AK, USA},\r\n  url = {http://octomap.sf.net/},\r\n  note = {Software available at \\url{http://octomap.sf.net/}}\r\n}\r\n```\r\n\r\n## Installation\r\n### Download\r\n### Compilation\r\n\r\n## Maps\r\nTake a look at some of our example maps below. You can find these and more datasets in our [dataset repository](http://ais.informatik.uni-freiburg.de/projects/datasets/octomap/) as finished OctoMap files and sources in the form of 3D laser scans. \r\n\r\n## Importing Data\r\n### Laser Scan Data\r\n\r\nPlain-text laser scan data can be imported from the following file format:\r\n```\r\nNODE x y z roll pitch yaw\r\nx y z\r\nx y z\r\n[...]\r\nNODE x y z roll pitch yaw\r\nx y z\r\n[...]\r\n```\r\nThe keyword NODE is followed by the 6D pose of the laser origin of the 3D scan (roll, pitch, and yaw angles are around the axes x, y, z respectively). After a NODE-line, the laser endpoints of the scan originating at that scan node are listed as 3D points, in the coordinate frame of the scan node. The next NODE keyword specifies the start of a new 3D scan. Lines starting with '#' or empty lines are ignored.\r\n\r\nOur tool \"log2graph\" converts these plain-text log files into a binary scan graph file, which can be directly opened and converted in the viewer \"octovis\", or converted to an octree map from the command line with \"graph2tree\".\r\n\r\n### 3D model files\r\n\r\nYou can directly create an OctoMap file from a variety of 3D file formats (3DS, VRML, OBJ ...) by first voxelizing them with [binvox](http://www.cs.princeton.edu/~min/binvox). For convenience, we provide the binvox Linux binary in src/extern/binvox.\r\n\r\nAfter converting your 3D data to a binvox file, you can create an Octree map from it by running our tool \"binvox2bt\". \r\n\r\n### Acknowledgments\r\n\r\nOctoMap was developed at University of Freiburg in the DFG-funded [SFB/TR8 Spatial Cognition](http://www.sfbtr8.uni-bremen.de/) within the projects A3-[MultiBot] and A8-[HumanoidSpace].\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}